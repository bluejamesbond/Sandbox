{
  "author": {
    "name": "Max Nachlinger",
    "url": "https://github.com/maxnachlinger"
  },
  "name": "cloudfront-private-url-creator",
  "description": "Creates private Cloudfront Urls",
  "homepage": "https://github.com/maxnachlinger/cloudfront-private-url-creator",
  "repository": {
    "url": "https://github.com/maxnachlinger/cloudfront-private-url-creator.git",
    "type": "git"
  },
  "keywords": [
    "cloudfront"
  ],
  "version": "1.0.50",
  "bugs": {
    "url": "https://github.com/maxnachlinger/cloudfront-private-url-creator/issues"
  },
  "license": "ISC",
  "scripts": {
    "test": "node tests/tests.js"
  },
  "main": "lib/",
  "devDependencies": {
    "tape": "~2.4.0"
  },
  "readme": "#cloudfront-private-url-creator\n\nCreates and signs private Cloudfront Urls (http:, https:, and rtmp:)\n\n[![Build Status](https://travis-ci.org/maxnachlinger/cloudfront-private-url-creator.png?branch=master)](https://travis-ci.org/maxnachlinger/cloudfront-private-url-creator)\n\n### Installation:\n```\nnpm install cloudfront-private-url-creator\n```\n### Usage:\n```javascript\n\"use strict\";\nvar fs = require('fs');\nvar cf = require('..');\n\nvar urlToSign = 'https://somedistro.cloudfront.net/somefolder/someFile';\nvar keyPairId = 'yourKeyPaidId';\nvar privateKeyPath = './yourKey.pem';\n\n// date when the private url will expire (1 hour from now in this case)\nvar dateLessThan = new Date();\ndateLessThan.setHours(dateLessThan.getHours() + 1);\n\nloadPrivateKey(function privateKeyCb(err, keyContents) {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  var config = {\n    privateKey: keyContents,\n    keyPairId: keyPairId,\n    dateLessThan: dateLessThan\n  };\n  // sign the url and return it, or just get the signature\n  var signatureQueryString = cf.getSignatureQueryString(urlToSign, config);\n  // OR\n  var signedUrl = cf.signUrl(urlToSign, config);\n});\n\nfunction loadPrivateKey(cb) {\n  fs.realpath(privateKeyPath, function (err, resolvedPath) {\n    if (err) {\n      return cb(err);\n    }\n\n    fs.readFile(resolvedPath, function (err, data) {\n      if (err) {\n        return cb(err);\n      }\n      cb(null, data);\n    });\n  });\n}\n```\n### Relevant AWS docs:\n[Creating a Signed URL Using a Canned Policy](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-creating-signed-url-canned-policy.html)\n\n[Creating a Signed URL Using a Custom Policy](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-creating-signed-url-custom-policy.html)\n### License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2013 Max Nachlinger\n",
  "readmeFilename": "README.md",
  "_id": "cloudfront-private-url-creator@1.0.50",
  "dist": {
    "shasum": "01fe6b3c33ff3caf7f7b9e401a685307b365db88"
  },
  "_from": "cloudfront-private-url-creator@*",
  "_resolved": "https://registry.npmjs.org/cloudfront-private-url-creator/-/cloudfront-private-url-creator-1.0.50.tgz"
}
