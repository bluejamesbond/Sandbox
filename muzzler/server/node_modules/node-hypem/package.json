{
  "name": "node-hypem",
  "version": "0.0.4",
  "author": {
    "name": "Sam Shelley",
    "email": "sam@samshelley.me"
  },
  "description": "nodejs wrapper for the hypem.com read-only public api",
  "keywords": [
    "hypem",
    "hypemachine"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/samshelley/node-hypem.git"
  },
  "main": "./lib/hypem.js",
  "readmeFilename": "README.md",
  "license": "MIT",
  "readme": "# Hypem NodeJS Wrapper\n\nThis is an unofficial nodejs wrapper around the (undocumented? -- I couldn't find anything) **Hype Machine** (http://hypem.com) public API. It is a port of [@JackCA's](https://github.com/JackCA/) implementation of a [Ruby gem](https://github.com/JackCA/hypem/) of the api. Note that there are some differences.\n\n## Installation\n`npm install node-hypem`\n\n## Usage\nFor general usage:\n```javascript\nvar Hypem = require(\"node-hypem\");\n```\nThe `Hypem` object has both a `Playlist` object, which can grab information about the various song lists on the hypem website, and a `User` object which returns playlists specific to the provided user.\n\nAll callbacks are of the form `function(err, response)`.\n###Playlist\nPlaylist functions return json playlist data. All parameters except for `filter` are required (which defaults to `all`). As the api does not provide cursors, paging may have concurrency issues if you don't monitor changes.\n```javascript\nHypem.playlist.popular(filter, page_number, callback) //Valid arguments for filter are: all, lastweek, remix, noremix, artists, twitter\nHypem.playlist.latest(filter, page_number, callback) //Valid arguments for filter are: all, remix, noremix, us\nHypem.playlist.artist(artist_name, page_number, callback)\nHypem.playlist.blog(blog_id, page_number, callback(data)) //note that you need the blog id, not it's name\nHypem.playlist.search(search_query, page_number, callback(data))\nHypem.playlist.tags([tag_array], page_number, callback(data)) //API warns against using too many tags\n```\n\n###User\n`Hypem.user(user_name)` creates a new user object. If the username is invalid, specific user requests will return either `[]` or `null` depending on the api call.\n\nThe following requests return playlists of tracks specific to the user.\n```javascript\nHypem.user(user_name).loved(page_number, callback)\nHypem.user(user_name).feed(page_number, callback)\nHypem.user(user_name).obsessed(page_number, callback)\nHypem.user(user_name).people(page_number, callback)\nHypem.user(user_name).people_history(page_number, callback)\nHypem.user(user_name).people_obsessed(page_number, callback)\n```\n\nAdditionally, the following user specific requests are also available:\n```javascript\nHypem.user(user_name).get_profile(page_number, callback)\nHypem.user(user_name).get_friends(page_number, callback)\nHypem.user(user_name).get_favorite_blogs(page_number, callback)\n```\n",
  "bugs": {
    "url": "https://github.com/samshelley/node-hypem/issues"
  },
  "_id": "node-hypem@0.0.4",
  "dist": {
    "shasum": "d58a811df199c1427ba53aabe8fde0afe48e9cd9"
  },
  "_from": "node-hypem@",
  "_resolved": "https://registry.npmjs.org/node-hypem/-/node-hypem-0.0.4.tgz"
}
