 package classes.controls{		import flash.display.DisplayObject;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.text.TextField;	import flash.net.URLVariables;		public class FormValidator extends EventDispatcher{				private var __fields:Array;		private var __url:String;		private var __messages:Object;		private var __outPut:String;		private var __request:URLRequest;		private var __urlLoader:URLLoader;		private var __error:TextField;		private var __post:URLVariables;		private var __errorPos:int;		private var __errorField:TextField;				public static var ON_ERROR:String = "onError";		public static var ON_SEND:String = "onSend";		public static var ON_SUBMIT:String = "onSubmit";		public static var ON_SUCCESS:String = "onSuccess";		public static var ON_CLEAR:String = "onClear";				private var __mc:DisplayObject;				public function FormValidator(fields:Array, url:String, messages:Object){			__fields = fields;			__url = url;			__messages = messages;		}				private function validarEmail(str:String):Boolean {            var pattern:RegExp = /(\w|[_.\-])+@((\w|-)+\.)+\w{2,4}+/;            var result:Object = pattern.exec(str);            if(result == null) {                return false;            }            return true;        }				private function checkData():Boolean{			__error = __mc["error"];			for(var i:int = 0; i < __fields.length; i++){								var current = mc[__fields[i].field];				if((__fields[i].required == true) && current.text == ""){					__outPut = __fields[i].error;					__errorField = current;					mc.stage.focus = current;					return false;				}				if((__fields[i].email == true) && !validarEmail(current.text)){					__outPut = __messages["emailError"];					__errorField = current;					mc.stage.focus = current;					//__errorPos = i;					return false;				}			}			return true;		}				public function sendMessage(){			var validar:Boolean = checkData();						__request = new URLRequest(__url + "?ck=" + new Date().getTime());			__urlLoader = new URLLoader();			__post = new URLVariables();			__urlLoader.addEventListener(Event.OPEN, handlerLoader);			__urlLoader.addEventListener(Event.COMPLETE, handlerLoader);			__urlLoader.addEventListener(IOErrorEvent.IO_ERROR, handlerLoader);						if(validar){				for (var i:uint = 0; i < __fields.length; i++){					var current = mc[__fields[i].field];					__post[__fields[i].field] = current.text;				}				__post.accion = "e98jkNh09qXl";				__request.method = URLRequestMethod.POST;				__request.data = __post;				__urlLoader.load(__request);				dispatchEvent(new Event(FormValidator.ON_SUBMIT));			} else{				dispatchEvent(new Event(FormValidator.ON_ERROR));			}		}				private function handlerLoader(e:*){			switch(e.type){				case "ioError":					//Error Interno					__outPut = __messages["error"];					//__error.text = __messages["error"];					dispatchEvent(new Event(FormValidator.ON_ERROR));					dispatchEvent(new Event(FormValidator.ON_SUCCESS));					break;				case "open":					__outPut = __messages["init"];					dispatchEvent(new Event(FormValidator.ON_SEND));					break;				case "complete":					//trace("respuest ",e.target.data);					if(e.target.data == "1"){						__outPut = __messages["success"];						limpiarDatos();						dispatchEvent(new Event(FormValidator.ON_SUCCESS));					}else{						__outPut = __messages["error"];						dispatchEvent(new Event(FormValidator.ON_SUCCESS));					}					dispatchEvent(new Event(FormValidator.ON_ERROR));					break;			}		}		//Metodos Para limpiar TextField 		private function limpiarDatos(){			for(var i:int = 0; i < __fields.length; i++){				var current = mc[__fields[i].field];				current.text = "";			}			dispatchEvent(new Event(FormValidator.ON_CLEAR));		}				//Gets y Sets 				public function set mc(value:DisplayObject){			__mc = value;		}				public function get mc():DisplayObject{			return __mc;		}				public function get outPut():String{			return __outPut;		}		public function get errorField():TextField{			return __errorField;		}		public function set fields(value:Array){			__fields = value;		}				public function get errorPos():int{			return __errorPos;		}					}}