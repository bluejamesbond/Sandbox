package gT.utils {	public class StringUtils {				public static function isValidURL(str:String):Boolean {			if (str.indexOf("http://") == -1 && str.indexOf("http://") == -1) {				return false;			}			if (str.indexOf(".") == -1) {				return (false);			}			return (true);		}				public static function padStringToCenter (str:String, maximum:uint, space:String = " "):String {				var result = "";			var whiteSpaces = Math.ceil((maximum - str.length) / 2);						if (str.length < maximum) {				for (var i:uint; i < whiteSpaces; i++) {					result += space;				}								result += str;								for (var k:uint; k < maximum - (whiteSpaces + str.length); k++) {					result += space;				}			} else {				return str.substr(0, maximum);   			}						return result;		};				public static function padStringToLeft (str:String, maximum:uint, space:String = " "):String {				var result = str;			var whiteSpaces = maximum - str.length;						if (str.length < maximum) {				for (var i:uint; i < whiteSpaces; i++) {					result += space;				}			} else {				return str.substr(0, maximum);   			}						return result;		};				public static function padStringToRight (str:String, maximum:uint, space:String = " "):String {				var result = "";			var whiteSpaces = maximum - str.length;						if (str.length < maximum) {				for (var i:uint; i < whiteSpaces; i++) {					result += space;				}								result += str;			} else {				return str.substr(0, maximum);   			}						return result;		};				public static function getExtension (path:String):String {			return path.substr(path.lastIndexOf('.') + 1, path.length);		}				public static function validateBoolean(raw:*, def:Boolean):Boolean {			if (raw != undefined && raw != null) {				return String(raw) == "true";			} else {				return def;			}		}				public static function isEmpty(str:String):Boolean		{			if (str == null || str == "") { 				return true; 			}			return false;		}				public static function isEmail(str:String):Boolean		{			if (isEmpty(str)) { return false; }						var regx:RegExp = /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/;			var result:Object = regx.exec(str);            			if(result == null) {                return false;            }            return true;		}				public static function isNumeric(str:String):Boolean {			if (isEmpty(str)) { return false; }			var regx:RegExp = /^[-+]?\d*\.?\d+(?:[eE][-+]?\d+)?$/;			return regx.test(str);		}		        private function validatePhoneNumber(str:String):Boolean {            if (isEmpty(str)) { return false; }			var pattern:RegExp = /^\d{3}-\d{3}-\d{4}$/;            var result:Object = pattern.exec(str);            if(result == null) {                return false;            }            return true;        }						//new RegExp(/^[a-zA-Z0-9]\w*/)		public static function getWords (str:String, regExp:RegExp = null):Array {			var result = [];			var array = str.split(" ");						var patron:RegExp = (!regExp) ? new RegExp(/[a-zA-Z0-9€ß]\w*/) : regExp;						for (var i in array) {				var word = patron.exec(array[i]);				if (word) {					result.push(word);				}			}			//trace(result)			return result.length ? result : null;		}				public static function trim(str:String):String {    		return str.replace(/^\s*(.*?)\s*$/g, "$1");		}				public static function substract(str:String, maxChars:Number, endSymbol:String = " ..."):String		{			if (maxChars) {				if (str.length > maxChars) {					return str.substr(0, maxChars)+endSymbol;				} 			}			return str;		}	}}