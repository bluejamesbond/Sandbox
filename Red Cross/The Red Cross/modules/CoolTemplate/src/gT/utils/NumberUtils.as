package gT.utils {				public class NumberUtils {				/**		*	Validacion del numbero de la tarjeta con respecto a tipo de targeta		*		*	@param numero:String numero de tarjeta 		*	@param tipoDeTarjeta:String tipo de tarjeta (visa, mastercard, americanexpress, dinersclub, discover)		*		*	@returns Bolean		*			*	@extra visa:4013-2002-0977-4812, mastercard:5490-1234-5678-9128, americanExpress:378282246310005, dinesClub:30569309025904, discover:6011111111111117		*/		public static function validateCreditCard(number:String, tipoDeTarjeta:String):Boolean {			var tipo:String = tipoDeTarjeta.toLowerCase();			var pattern:RegExp;			var result:Object;						switch (tipo) {				case "visa" :					pattern = /^4\d{3}-?\d{4}-?\d{4}-?\d{4}$/;					result = pattern.exec(number);					if(result == null) {						return false;					}				break;				case "mastercard" :					pattern = /^5[1-5]\d{2}-?\d{4}-?\d{4}-?\d{4}$/;					result = pattern.exec(number);					if(result == null) {						return false;					}				break;				case "americanexpress" :					pattern = /^3[4,7]\d{13}$/;					result = pattern.exec(number);					if(result == null) {						return false;					}				break;				case "dinersclub" :					pattern = /^3[0,6,8]\d{12}$/;					result = pattern.exec(number);					if(result == null) {						return false;					}				break;				case "discover" :					pattern = /^6011-?\d{4}-?\d{4}-?\d{4}$/;					result = pattern.exec(number);					if(result == null) {						return false;					}				break;			}						return true;		}				/**		*	randon entre un minimo y un maximo		*/		public static function randomInt(min : int, max : int) : int{			return min + Math.round(Math.random() * (max-min));		}				public static function randRange(min:Number, max:Number):Number{			return min + Math.random() * (max-min);		}				/**		*	retorna un numero separado por miles		*		*	@param number:Number numero a formatear		*	@param delimitador:String caracter usado para separar miles		*/		public static function numberFormat(number:Number, delimitador:String = "."):String {			var numero:String = number.toString();			var numeroSeparado:Array = numero.split("");			var counter:Number = 3;			var i:Number = numeroSeparado.length;						while (--i > 0) {				counter--;				if (counter == 0) {					counter = 3;					numeroSeparado.splice(i, 0, delimitador);				}			}						numero = numeroSeparado.join("");						return numero;		};				public static function round(qnum:Number, qdecimal:Number, qdecimalmin:Number):Number {			var decimal:Number = Math.pow(10, Math.round(qdecimal));			var num:Number = Math.round(qnum * decimal)/decimal;			if (qdecimalmin && qdecimalmin >= qdecimal) {				num = NumberUtils.formatDecimal(num, qdecimalmin);			}			return num;		}				/* adds trailing zeros to a number */		public static function formatDecimal(qnum:Number, qdecimal:Number){			var decimal:Number = Math.round(qdecimal);			//if number of decimals is zero, there's no need to continue			if (decimal<=0) {				return Math.round(qnum);			}			var newNum:String = String(qnum);			//if number is an integer, add a .0 first, so we can continue adding zeros			//at least 1 zero is needed			if (newNum.indexOf(".") == -1) {				newNum += ".0";			}			var decimals:String = newNum.split(".")[1];			var zeroMissing = decimal-decimals.length;			//add zeros to number			for (var i = 1; i<=zeroMissing; i++) {				newNum += "0";			}						return newNum;		}				public static function currencyFormat(amount_param:String, symbol:String = "$", thousandsSeparator:String = ",", decimalsSeparator:String = ".", decimals:Boolean = true, roundDecimals:Boolean = true):String 		{						if ((amount_param == "")) {				return "";			} else {								var _myDot:Number;				var _myString:String;				var myvalue:String;				var cents:String;				var myLength:Number;				var divide:Number;				var dollars:String;								(amount_param) ? _myString = amount_param.toString() : _myString = "";								_myDot = _myString.indexOf(".");								if (_myDot <= 0) {					myvalue = _myString;					cents = "00";				} else {					myvalue = _myString.substr(0, _myDot);					cents = _myString.substr(_myDot+1, _myString.length);				}								if (myvalue.length > 0) {					myLength = myvalue.length;					divide = myLength/3;					if ((myLength % 3) == 0) {						divide = (myLength/3)-1;					}					for (var i = 1; i<=divide; i++) {						myvalue = myvalue.substr(0, (myLength-(3*i)-(i-1))) + thousandsSeparator + myvalue.substr((myLength-(3*i)-(i-1)), (3*i)+(i-1));						myLength = myvalue.length;					}					dollars = myvalue;				}								if (cents.length>2) {										if (roundDecimals) {						cents = cents.substr(0, 2)+decimalsSeparator+cents.substr(2, cents.length);						cents = String(Math.round(Number(cents)));					} else {						cents = cents.substr(0, 2)+decimalsSeparator+cents.substr(2, cents.length);					}									} else if (cents.length == 1) {					cents = cents+"0";				}								if(symbol != "") {					symbol = symbol+" ";				}				if (decimals) {					return symbol + dollars + decimalsSeparator + cents;				} else {					return symbol + dollars;				}			}		}	}		}