package gT.utils {		import flash.display.DisplayObjectContainer;	import flash.display.DisplayObject;		public class DisplayObjectUtils {				private static function setProperties(target:Object, propiedades:Object):void {			for (var i:String in propiedades) {				target[i] = propiedades[i];			}		}				public static function addProperties (target:*, properties:*):void {			if (target is Array) {				for (var i:uint = 0; i < target.length; i++) {					if (properties is Array) {						for (var j:uint = 0; j < properties.length; j++) {							setProperties(target[j], properties[j]);						}					} else {						setProperties(target[i], properties);					}				}			} else {				setProperties(target, properties);			}		}				public static function getProperties (target:*):Object {			var t = target;			var result = {				name:t.name,				alpha:t.alpha, 				visible:t.visible, 				x:t.x, 				y:t.y,				width:t.width, 				height:t.height, 				scaleX:t.scaleX, 				scaleY:t.scaleY,				rotation:t.rotation 			}			return result;		}				public static function cloneProperties (objectToClone:*, objecCloned:*) {			var t = objectToClone;			var t2 = objecCloned;						t2.name = t.name;			t2.alpha = t.alpha;			t2.x = t.x;			t2.y = t.y;			t2.visible = t.visible;			t2.width = t.width;			t2.height = t.height;			t2.scaleX = t.scaleX;			t2.scaleY = t.scaleY;			t2.rotation = t.rotation;		}				public static function setProporcionalSize (target, w:int, h:int, forced:Boolean = false):void {						if (forced) {				// forced				if (target.width > target.height) {					target.width = w;					target.scaleY = target.scaleX;					if (target.height > h) {						target.height = h;						target.scaleX = target.scaleY;					}				} else {					target.height = h;					target.scaleX = target.scaleY;					if (target.width > w) {						target.width = w;						target.scaleY = target.scaleX;					}				}			} else {				// normal				target.width = w;				target.height = h;				if (target.scaleX > target.scaleY) {					target.scaleY = target.scaleX;				} else {					target.scaleX = target.scaleY;				}			}		}				public static function centerToObject (target:DisplayObject, reference:DisplayObject, rounded:Boolean = true):void {			target.x = (rounded) ? Math.round((reference.width - target.width)/2) : (reference.width - target.width)/2;			target.y = (rounded) ? Math.round((reference.height - target.height)/2) : (reference.height - target.height)/2;		}				public static function centerToStage (target:DisplayObject, rounded:Boolean = true):void {			target.x = (rounded) ? Math.round((target.stage.stageWidth - target.width)/2) : (target.stage.stageWidth - target.width)/2;			target.y = (rounded) ? Math.round((target.stage.stageHeight - target.height)/2) : (target.stage.stageHeight - target.height)/2;		}				public static function addChildren (target:DisplayObjectContainer, ...rest):void {			for (var i:int = 0; i<rest.length; i++) {				if (target.contains(rest[i]) == false) {					target.addChild(rest[i]);				}			}		};				public static function removeChildren (target:DisplayObjectContainer, ...rest) {			for (var i:int = 0; i<rest.length; i++) {				if (target.contains(rest[i])) {					target.removeChild(rest[i]);				}			}		};				public static function roundPosition (target:DisplayObject):void {			target.x = Math.round(target.x);		    target.y = Math.round(target.y);		}				public static function getChildren (target:DisplayObjectContainer):Array {			var result:Array = [];						for (var i:uint; i < target.numChildren; i++) {				result.push(target.getChildAt(i));			}						return result;		}	}}