package gT.utils {		public class EventUtils {				public static function add (target:*, events:*, handler:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = true):void {			if (target is Array) {				for (var i:int = 0; i<target.length; i++) {					if (events is Array) {						for (var k:int = 0; k<events.length; k++) {							target[i].addEventListener(events[k], handler, useCapture, priority, useWeakReference);						}					} else {						target[i].addEventListener(events, handler, useCapture, priority, useWeakReference);					}				}			} else {				if (events is Array) {					for (var j:int = 0; j<events.length; j++) {						target.addEventListener(events[j], handler, useCapture, priority, useWeakReference);					}				} else {					target.addEventListener(events, handler, useCapture, priority, useWeakReference);				}			}		}				public static function remove (target, events, handler:Function):void {			if (target is Array) {				for (var i:int = 0; i<target.length; i++) {					if (events is Array) {						for (var k:int = 0; k<events.length; k++) {							target[i].removeEventListener(events[k], handler);						}					} else {						target[i].removeEventListener(events, handler);					}				}			} else {				if (events is Array) {					for (var j:int = 0; j<events.length; j++) {						target.removeEventListener(events[j], handler);					}				} else {					target.removeEventListener(events, handler);				}			}		}	}}