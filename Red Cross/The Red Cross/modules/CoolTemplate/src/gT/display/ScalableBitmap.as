package gT.display {		import flash.display.Sprite;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.geom.Rectangle;	import flash.geom.Point;		public class ScalableBitmap extends Sprite 	{				private var __bitmapData:BitmapData;		private var __bitmap:Bitmap;		private var __mainHolder:Sprite;		private var __scale9Grid:Rectangle;		private var __offset:Rectangle;		private var __width:Number;		private var __height:Number;		private var __round:Boolean;				private var TL:Bitmap, T:Bitmap, TR:Bitmap, L:Bitmap, C:Bitmap, R:Bitmap, BL:Bitmap, B:Bitmap, BR:Bitmap;				public function ScalableBitmap (bitmapData:BitmapData, scale9Grid:Rectangle, offset:Rectangle = null, round:Boolean = true)		{			__bitmapData = bitmapData;			__scale9Grid = scale9Grid;			__offset = offset;			__round = round;						init();		}				private function init ():void		{			// Main Holder			__mainHolder = new Sprite;			addChild(__mainHolder);						addParts();						if (__offset) {				__mainHolder.x = -__offset.x;				__mainHolder.y = -__offset.y;				__width = __offset.width;				__height = __offset.height;			} else {				__width = __bitmapData.width;				__height = __bitmapData.height;			}		}				private function addParts ():void		{						TL = addPart(new Rectangle(0, 0, __scale9Grid.x, __scale9Grid.y));			T = addPart(new Rectangle(__scale9Grid.x, 0, __scale9Grid.width, __scale9Grid.y));			TR = addPart(new Rectangle(__scale9Grid.right, 0, __scale9Grid.left, __scale9Grid.y));						L = addPart(new Rectangle(0, __scale9Grid.y, __scale9Grid.x, __scale9Grid.height));			C = addPart(new Rectangle(__scale9Grid.x, __scale9Grid.y, __scale9Grid.width, __scale9Grid.height));			R = addPart(new Rectangle(__scale9Grid.right, __scale9Grid.y, __scale9Grid.left, __scale9Grid.height));						BL = addPart(new Rectangle(0, __scale9Grid.bottom, __scale9Grid.x, __bitmapData.height - __scale9Grid.bottom));			B = addPart(new Rectangle(__scale9Grid.x, __scale9Grid.bottom, __scale9Grid.width, __bitmapData.height - __scale9Grid.bottom));			BR = addPart(new Rectangle(__scale9Grid.right, __scale9Grid.bottom, __scale9Grid.left, __bitmapData.height - __scale9Grid.bottom));					}				private function addPart (rect:Rectangle):Bitmap 		{			// BitmapData			var bmd = new BitmapData(rect.width, rect.height);			var pt:Point = new Point(0, 0);			bmd.copyPixels(__bitmapData, rect, pt);						// Bitmap			var bmp = new Bitmap(bmd);			bmp.x = rect.x;			bmp.y = rect.y;						__mainHolder.addChild(bmp);						return bmp;		}				private function resize () {			var sw = __scale9Grid.x + (__bitmapData.width - __scale9Grid.right);			var sh = __scale9Grid.y + (__bitmapData.height - __scale9Grid.bottom);			var ow = (__offset) ? __offset.x + (__bitmapData.width - __offset.right) : 0;			var oh = (__offset) ? __offset.y + (__bitmapData.height - __offset.bottom) : 0;			var w = (width - sw) + ow;			var h = (height - sh) + oh;			var sx = __scale9Grid.x;			var sy = __scale9Grid.y;						if (w < 0) {				w = 0;			}						if (h < 0) {				h = 0			}			T.width = w;			TR.x = sx + w;			L.height = h;			C.width = w;			C.height = h;			R.height = h;			R.x = sx + w;			BL.y = sy + h;			B.width = w;			B.y = sy + h;			BR.x = sx + w;			BR.y = sy + h;		}				/// SET & GET		override public function set width (value:Number):void 		{			var w:Number;						if (__round) {				w = Math.round(value);			} else {				w = value;			}			 			if (w != __width) {				__width = w;				resize();			}		}		override public function set height (value:Number):void 		{			var h:Number;						if (__round) {				h = Math.round(value);			} else {				h = value;			}						if (h != __height) {				__height = h;				resize();			}		}		override public function get width ():Number 		{			return __width;		}		override public function get height ():Number 		{			return __height;		}	}}