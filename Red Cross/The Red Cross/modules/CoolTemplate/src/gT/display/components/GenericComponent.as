package gT.display.components{		import flash.display.Sprite;	import flash.events.Event;	import flash.utils.getQualifiedClassName;		public class GenericComponent extends Sprite 	{				protected var __width:Number = 0;		protected var __height:Number = 0;		protected var __minWidth:Number = 5;		protected var __minHeight:Number = 5;		protected var __widthSizable:Boolean;		protected var __heightSizable:Boolean; 		protected var __autoResize:Boolean;		protected var __minXMargin:Number = 0;		protected var __minYMargin:Number = 0;		protected var __maxXMargin:Number = 0;		protected var __maxYMargin:Number = 0;		protected var __round:Boolean;		protected var __useInvalidate:Boolean = true;		protected var __livePreview:Boolean;		protected var __dispatchResizeEvent:Boolean = true;				public static const DRAW:String = "draw";		public static const ON_COMPONENT_READY:String = "onComponentReady";						public function GenericComponent(_round:Boolean = true, _useInvalidate = false) {			super();			__round = _round;			__useInvalidate = _useInvalidate;			init();						addEventListener(Event.ADDED_TO_STAGE, onAddedToStage, false, 0, true);		}				//////////////////////		//		// Protected Methods		//		//////////////////////				protected function init ():void		{			__livePreview = checkLivePreview();						addChildren();						if (super.width > 0 && super.height > 0) {				var w:Number = super.width;				var h:Number = super.height;				super.scaleX = super.scaleY = 1;				setSize(w,h);			} else {				setSize(__minWidth,__minHeight);			}			//move(super.x,super.y);			invalidate();		}				protected function onStage():void		{		}				protected function onRemovedFromStage():void		{		}				protected function addChildren():void		{		}				protected function onComponentReady():void		{			dispatchEvent(new Event(GenericComponent.ON_COMPONENT_READY));		}				protected function invalidate():void		{			addEventListener(Event.ENTER_FRAME, onInvalidate, false, 0, true);		}				//////////////////////		//		// Public Methods		//		//////////////////////		public function move(xpos:Number, ypos:Number):void		{			x = Math.round(xpos);			y = Math.round(ypos);		}				public function setSize(w:Number, h:Number):void		{			width = w;			height = h;		}				public function setMinSize(w:Number, h:Number):void		{			minWidth = w;			minHeight = h;		}				public function draw():void		{			dispatchEvent(new Event(GenericComponent.DRAW));		}						//////////////////////		//		// Private Methods		//		//////////////////////						private function checkLivePreview():Boolean {			if (parent == null) { 				return false; 			}			var className:String;			try {				className = getQualifiedClassName(parent);				} catch (e:Error) {}						return (className == "fl.livepreview::LivePreviewParent");			}				//////////////////////		//		// Events Handlers		//		//////////////////////		protected function onInvalidate(event:Event):void		{			removeEventListener(Event.ENTER_FRAME, onInvalidate);			draw();			onComponentReady();			}				private function onAddedToStage(e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStageHandler, false, 0, true);			onStage();		}				private function onRemovedFromStageHandler(e:Event):void		{			removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStageHandler);			onRemovedFromStage();		}				//////////////////////		//		// Getters & Setters		//		//////////////////////		override public function set width(value:Number):void		{						if (value <= __minWidth) {				value = __minWidth;			}			//if (value >= __minWidth) {				if (round) {					__width = Math.round(value);				} else {					__width = value;				}				if (__useInvalidate) {					invalidate();				} else {					draw();				}				if (__dispatchResizeEvent) {					dispatchEvent(new Event(Event.RESIZE));				}			//}		}				override public function get width():Number		{			return __width;		}				override public function set height(value:Number):void		{						if (value <= __minHeight) {				value = __minHeight;			}						//if (value >= __minHeight) {				if (round) {					__height = Math.round(value);				} else {					__height = value				}				if (__useInvalidate) {					invalidate();				} else {					draw();				}				if (__dispatchResizeEvent) {					dispatchEvent(new Event(Event.RESIZE));				}			//}		}				override public function get height():Number		{			return __height;		}				public function set minWidth(value:Number):void		{			__minWidth = value;			if(__width <= __minWidth) {				__width = __minWidth;			}		}		public function set minHeight(value:Number):void		{			__minHeight = value;			if(__height <= __minHeight) {				__height = __minHeight;			}		}				public function get minWidth():Number		{			return __minWidth;		}		public function get minHeight():Number		{			return __minHeight;		}		override public function set x(value:Number):void		{			if (round) {				super.x = Math.round(value);			} else {				super.x = value;			}		}				override public function set y(value:Number):void		{			if (round) {				super.y = Math.round(value);			} else {				super.y = value;			}		}				public function set round (value:Boolean):void		{			__round = value;		}				public function get round ():Boolean		{			return __round;		}				public function set useInvalidate (value:Boolean):void		{			__useInvalidate = value;		}				public function get useInvalidate ():Boolean		{			return __useInvalidate;		}			}		}	