package gT.display {		import flash.display.Sprite;	import flash.display.Graphics;	import flash.display.Shape;		public class Draw {				public static function rectangle (w:Number = 100, h:Number = 100, color:Number = 0x00, alpha:Number = 1):Sprite {			w = (w < 0) ? 1 : w;			h = (h < 0) ? 1 : h;						var r:Sprite = new Sprite;			r.graphics.beginFill(color);			r.graphics.drawRect(0, 0, w, h);			r.graphics.endFill();			r.alpha = alpha;						return r;		}				public static function roundRectangle (w:Number = 100, h:Number = 100, cornerRadius:Number = 20, color:Number = 0x00, alpha:Number = 1):Sprite{			var r:Sprite = new Sprite;			r.graphics.beginFill(color);			r.graphics.drawRoundRect(0, 0, w, h, cornerRadius);			r.graphics.endFill();			r.alpha = alpha;			return r;		}				public static function ellipse(w:Number = 100, h:Number = 100, color:Number = 0x00, alpha:Number = 1):Sprite		{			var r:Sprite = new Sprite;			r.graphics.beginFill(color);			r.graphics.drawEllipse(0, 0, w, h);			r.graphics.endFill();			r.alpha = alpha;			return r;		}				public static function drawWedge(t:Graphics, sx:Number, sy:Number, radius:Number, arc:Number, startAngle:Number = 0):void 		{			var segAngle:Number, angle:Number, angleMid:Number, numOfSegs:Number, ax:Number, ay:Number, bx:Number, by:Number, cx:Number, cy:Number;						t.moveTo(sx, sy);						if (Math.abs(arc)>360) {				arc=360;			}						numOfSegs= Math.ceil( Math.abs(arc) / 45);			segAngle=arc/numOfSegs;			segAngle = (segAngle / 180) * Math.PI;			angle = (startAngle / 180) * Math.PI;						ax = sx + Math.cos(angle) * radius;			ay = sy + Math.sin(-angle) * radius;						t.lineTo(ax, ay);						for (var i:int=0; i<numOfSegs; i++) {				angle += segAngle;				angleMid = angle - (segAngle / 2);				bx = sx + Math.cos(angle) * radius;				by= sy + Math.sin(angle) * radius;				cx = sx + Math.cos(angleMid) * (radius / Math.cos(segAngle / 2));				cy = sy + Math.sin(angleMid) * (radius / Math.cos(segAngle / 2));				t.curveTo(cx, cy, bx, by);			}						t.lineTo(sx, sy);		}	}}