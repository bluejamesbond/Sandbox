/*Menu.asgTFrameworkCreated on 10/11/09.Copyright 2009 goTo! Multimedia. All rights reserved.*/package gT.controls {	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;		import gT.display.layout.HVLayout;	import gT.display.components.GenericComponent;			public class Menu extends GenericComponent {				protected var __source:Array;		protected var __holder:HVLayout;		protected var __elements:Array;		protected var __selected:*;		protected var __selectedIndex:Number;		protected var __fireEvent:Boolean = true;				public function Menu () {			super();		}				//////////////////////////////////////////////////////////		//		// Protected Methods		//		//////////////////////////////////////////////////////////		override protected function addChildren():void		{			// layout			__holder = new HVLayout;			addChild(__holder);		}				protected function createItem(index:uint):*		{			// override this method		}				protected function clearItem(index:uint):void		{			// override this method		}				//////////////////////////////////////////////////////////		//		// Public Methods		//		//////////////////////////////////////////////////////////				override public function draw ():void		{			if(__holder.orientation == "horizontal"){				__width = __holder.width;			}else{				__height = __holder.height;			}					}				public function click (index:uint, fireEvent:Boolean = true):void		{			if (!__elements) return;						__fireEvent = fireEvent;			__elements[index].dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));			__elements[index].dispatchEvent(new MouseEvent(MouseEvent.CLICK));					}				public function unClick ():void		{			if (!__selected) return;						__selected.enabled = true;			__selected = null;			__selectedIndex = NaN;		}		//////////////////////////////////////////////////////////		//		// Events Handler		//		//////////////////////////////////////////////////////////		protected function onItemClicked (e:*):void		{			if (!__fireEvent) {				__fireEvent = true;				e.stopImmediatePropagation();			}						if (__selected) {				__selected.enabled = true;			}			__selected = e.currentTarget;			__selectedIndex = e.currentTarget.index;			__selected.enabled = false;		}		//////////////////////////////////////////////////////////		//		// Private Methods		//		//////////////////////////////////////////////////////////				protected function createItems ():void		{							for (var i:uint; i < __source.length; i++) 			{				var item = createItem(i);				item.index = i;				__elements.push(item);				__holder.addChild(item);			}						draw();		}				protected function clearItems ():void		{			if (!__elements) return;						for (var i:uint; i < __elements.length; i++) 			{				clearItem(i);				__holder.removeChild(__elements[i]);			}						__elements = [];	// Create element Array		}				//////////////////////////////////////////////////////////		//		// Setters && Getters		//		//////////////////////////////////////////////////////////				public function set source (value:Array):void		{			if(!value) return;						__selected = null		// Reset the current selected			__selectedIndex = NaN	// Reset the Index			clearItems();			// Clear the elements if any						__source = value;		// Set data						__elements = [];		// Create element Array			createItems();			// Now create the item list		}				public function get selected ():*		{			return __selected;		}				public function get selectedIndex ():Number		{			return __selectedIndex;		}				public function get elements ():Array		{			return __elements;		}				public function set orientation (value:String):void		{			__holder.orientation = value;			draw();		}				public function get orientation ():String		{			return __holder.orientation;		}				public function set gab(value:uint):void{			__holder.gab = value;		}	}}