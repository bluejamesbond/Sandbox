//**************************************************\\//**************************************************\\//** TITLE: CobraForm.as		 	  		 	  **\\//** VERSION: 1.1  								  **\\//** LAST UPDATE: February 8, 2010    	       	  **\\//**************************************************\\//**************************************************\\//** CREATED BY: Metaphor Creations               **\\//** joe@metaphorcreations.com               	  **\\//** www.flashden.net/user/JoeMC                  **\\//** www.metaphorcreations.com               	  **\\//**************************************************\\//**************************************************\\package com.metaphor_creations.cobra {	import flash.display.*;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.FocusEvent;	import flash.text.TextField;	import fl.data.DataProvider;	import flash.text.TextFieldAutoSize;	import fl.controls.ComboBox;	import flash.text.TextFormat;	import caurina.transitions.*;	import com.metaphor_creations.cobra.Singleton;		public class CobraForm extends Sprite {				private static var CURR_SYMBOL:String = "$";		private var singleton:Singleton;				private var form_heading:String;		private var form_validate:String;		private var form_restrict:String;		private var form_tip:String;				private var form_multiline:Boolean = false;		private var form_required:Boolean = false;		private var completed:Boolean = false;				private var combo_box:DataProvider;				private var combo:ComboBox;				private var text_lines:Number = 1;				private var form_background:MovieClip;				private var form_color:uint;				// Setup the constructor when the class is created		public function CobraForm(header:String, _required:String="false", _multiline:String="false", _validate:String="", _restrict:String="", _tip:String="", _combo:DataProvider=null):void {						// Create a singleton object			singleton = Singleton.getInstance();						// Save variables			form_heading = header;			if (_required.toLowerCase() == "true") form_required = true;			if (_multiline.toLowerCase() == "true") form_multiline = true;			if (_combo) combo_box = _combo;			form_validate = _validate;			form_restrict = _restrict;			form_tip = _tip;						// Initialize the form			init();		}												//**********************************************************************		// Functions		//**********************************************************************				public function animateRequiredIcon():void {						// Tween the required icon			Tweener.addTween(required, {scaleX:1.3, scaleY:1.3, time:.1, transition:"easeInQuart"});			Tweener.addTween(required, {scaleX:1, scaleY:1, time:.2, delay:.1, transition:"easeOutQuart"});		}				private function checkCurrency():void {						// Save a string from the text			var str:String = txt.text;						// If they have put a currency symbol, remove it			if (str.charAt(0)==CURR_SYMBOL) str = str.substr(1, str.length);						// Split the string if there are commas already			var number_array:Array = str.split(",");						// Joing the array back together			str = number_array.join("");						// Save the number			var num:Number = Number(str);						// Add the currency symbol and make 2 decimal places			txt.text = formatAsDollars(num);		}				private function drawBackground():void {						// Draw the background			form_background.graphics.clear();			form_background.graphics.beginFill(form_color);			form_background.graphics.drawRoundRect(5.5,0,singleton.scrollerContentWidth-5.5,fieldBG.height+34,10,10);			form_background.graphics.endFill();		}				private function formatAsDollars (amount:Number):String {						// Function found at http://kb2.adobe.com/cps/142/tn_14267.html			// return a 0 dollar value if amount is not valid			// (you may optionally want to return an empty string)			if (isNaN(amount)) return "$0.00"; 						// round the amount to the nearest 100th			amount = Math.round(amount*100)/100;						// convert the number to a string			var amount_str:String = String(amount);						// split the string by the decimal point, separating the			// whole dollar value from the cents. Dollars are in			// amount_array[0], cents in amount_array[1]			var amount_array = amount_str.split(".");						// if there are no cents, add them using "00"			if (amount_array[1] == undefined) amount_array[1] = "00";						// if the cents are too short, add necessary "0"			if (amount_array[1].length == 1) amount_array[1] += "0";						// add the dollars portion of the amount to an			// array in sections of 3 to separate with commas			var dollar_array:Array = new Array();						var start:Number;						var end:Number = amount_array[0].length;						while (end > 0) {				start = Math.max(end - 3, 0);				dollar_array.unshift(amount_array[0].slice(start, end));				end = start;			}						// assign dollar value back in amount_array with			// the a comma delimited value from dollar_array			amount_array[0] = dollar_array.join(",");						// finally construct the return string joining			// dollars with cents in amount_array			return (CURR_SYMBOL + amount_array.join("."));		}				private function init():void {						// Add 1 to the form count			singleton.updateFormCount = 1;						// Disable the children			fieldBG.mouseEnabled = false;			required.mouseEnabled = false;			heading.mouseEnabled = false;						fieldBG.mouseChildren = false;			required.mouseChildren = false;			// Set the heading			heading.autoSize=TextFieldAutoSize.LEFT;			heading.text = form_heading;						// Set the tip			tip.x = heading.x + heading.width;			tip.autoSize=TextFieldAutoSize.LEFT;			if (form_tip != "") tip.text = "("+form_tip+")";						// Set the multiline attrubute of the text			txt.multiline = txt.wordWrap = form_multiline;			txt.autoSize=TextFieldAutoSize.LEFT;			txt.selectable = true;						if (form_multiline) {				txt.text = "\n";				fieldBG.height = txt.height + 5;				txt.text = "";			}						// Set restrictions on the textfield			if (form_restrict.toLowerCase() == "letters") txt.restrict = "A-Z a-z";			if (form_restrict.toLowerCase() == "numbers") txt.restrict = "0-9";			if (form_restrict.toLowerCase() == "currency") txt.restrict = "0-9 .";						// Add the required icon, if necessary			if (form_required){								// Add 1 to the required form count				singleton.updateRequiredFormCount = 1;								required.visible = true;				required.gotoAndStop(1);			} else {				required.visible = false;			}						// Set the form width			setFormWidth();						// Set the form color			form_color = singleton.formColor;						// Draw the background			form_background = new MovieClip();			drawBackground();			addChildAt(form_background,0);						if (combo_box) {				var tf:TextFormat = new TextFormat();				tf.font = "Arial";								combo = new ComboBox();				combo.setStyle("embedFonts", true);				combo.dropdown.setRendererStyle("embedFonts", true);				combo.dropdown.setRendererStyle("textFormat", tf);				combo.textField.setStyle("embedFonts", true);				combo.dataProvider = DataProvider(combo_box.getItemAt(0).items);				if (combo_box.getItemAt(0).prompt != "") combo.prompt = combo_box.getItemAt(0).prompt;								removeChild(fieldBG);				removeChild(txt);								combo.x = 17.4;				combo.y = 25;								combo.width = fieldBG.width - 30;								addChild(combo);			}						// Set the required icon position			if (form_multiline) required.y = form_background.height/2;						// Add listeners			txt.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);			txt.addEventListener(Event.CHANGE, textChange);			form_background.addEventListener(MouseEvent.CLICK, formClick);			singleton.addEventListener("scrollerContentWidthChanged", changeWidth);		}				public function selectForm():void {						// Set the focus to the textfield			txt.stage.focus = txt;						updateScrollerPosition();		}				private function setFormWidth():void {						// Set the width of the form			fieldBG.width = singleton.scrollerContentWidth - fieldBG.x*2 + 5.5;			this.txt.width = fieldBG.width - 10;			heading.width = fieldBG.width;		}				private function updateScrollerPosition():void {			// Create variables			var min_y:Number = -singleton.scrollerContentPosition;			var max_y:Number = min_y + singleton.scrollerHeight - this.height;			// If the form is above the viewable area			if (this.y < min_y) singleton.scrollerContentPosition = -this.y;						// If the form is below the viewable area			if (this.y > max_y) singleton.scrollerContentPosition = -this.y + (singleton.scrollerHeight - this.height);		}				private function validateText():void {						var complete_count = 0;			var validate:Boolean = false;						// If the text field is not empty			if (txt.text != "") validate = true;						// Validate an email address			if (form_validate.toLowerCase() == "email") {								// Set validate				validate = false;								// Make sure there is 1 @ symbol and at least 1 period				if (txt.text.split("@").length == 2 && txt.text.split(".").length > 1 && txt.length > 5) validate = true;			}						// Check to see if the text is validated			if (validate) {								// If the form is set as completed				if (!completed) {										completed = true;					complete_count = 1;				}								// Animate the required icon, if necessary				if (required.currentFrame==1 || required.currentFrame==3) animateRequiredIcon();								// Set the required icon				required.gotoAndStop(2);							} else {								// If the form is set as completed				if (completed) {										completed = false;					complete_count = -1;				}								// Animate the required icon, if necessary				if (required.currentFrame==2) animateRequiredIcon();								// Set the required icon				required.gotoAndStop(1);			}						// Update the completed count			singleton.updateFormCountCompleted = complete_count;			if (form_required) singleton.updateRequiredFormCountCompleted = complete_count;		}				public function resetForm():void {						// Reset the text			txt.text = "";						// Validate the test			validateText();		}		//**********************************************************************		// Functions		//**********************************************************************												//**********************************************************************		// Events		//**********************************************************************				private function changeWidth(e:Event):void {						// Set the textfield			setFormWidth();						// Redraw the background			drawBackground();		}				private function textChange(e:Event):void {						// Check to see if the number of lines has changed			if (txt.numLines != text_lines) {								// Set the fieldBG height & redraw the background				fieldBG.height = txt.height + 5;				drawBackground();								// Tween the required icon				if (form_required) required.y=form_background.height/2;								// Resave the text_lines				text_lines = txt.numLines;								// Update the singleton				singleton.scrollerContentUpdate();								// Update the scroller position				updateScrollerPosition();			}						validateText();		}				//**********************************************************************		// Events		//**********************************************************************												//**********************************************************************		// Mouse Events		//**********************************************************************				private function formClick(e:MouseEvent):void {						// Set the focus to the textfield			txt.stage.focus = txt;						updateScrollerPosition();		}				//**********************************************************************		// Mouse Events		//**********************************************************************												//**********************************************************************		// Focus Events		//**********************************************************************				private function focusInHandler(e:FocusEvent):void {			// Save the form_color & redraw the background			form_color = singleton.selectedFormColor;			drawBackground();						// Animate the required icon, if necessary			if (required.currentFrame==1 || required.currentFrame==3) animateRequiredIcon();						// Update the scroller position			updateScrollerPosition();						// Add listener			txt.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);		}				private function focusOutHandler(e:FocusEvent):void {			// Remove listener			txt.removeEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);						if (form_restrict.toLowerCase() == "currency") checkCurrency();						// Save the form_color & redraw the background			form_color = singleton.formColor;			drawBackground();		}				//**********************************************************************		// Focus Events		//**********************************************************************												//**********************************************************************		// Getters		//**********************************************************************				public function get formHeading():String {		   // Return the heading		   return form_heading;        }				public function get isRequired():Boolean {		   // Return the required		   return form_required;        }				//**********************************************************************		// Getters		//**********************************************************************	}}