//**************************************************\\//**************************************************\\//** TITLE: CobraButton.as		 	  		  	  **\\//** VERSION: 1.0  								  **\\//** LAST UPDATE: July 25, 2009    	       	      **\\//**************************************************\\//**************************************************\\//** CREATED BY: Metaphor Creations               **\\//** joe@metaphorcreations.com               	  **\\//** www.flashden.net/user/JoeMC                  **\\//** www.metaphorcreations.com               	  **\\//**************************************************\\//**************************************************\\package com.metaphor_creations.cobra {	import flash.display.*;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.utils.getDefinitionByName;	import flash.text.TextFieldAutoSize;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.Font;	import flash.filters.DropShadowFilter;	import flash.geom.Matrix;    import flash.geom.Transform;		public class CobraButton extends Sprite {				private static var BTN_PADDING:int = 10;		private static var BTN_COLOR:Array = [0xB0B2B5, 0x3C3B3C];		private static var BTN_OVER_COLOR:Array = [0xB0B2B5, 0x222222];		private static var BTN_DOWN_COLOR:Array = [0x888888, 0x222222];		private static var BTN_OUTLINE_COLOR:Array = [0xFFFFFF];				private var btnWidth:Number;		private var btnHeight:Number;				private var btnLabel:TextField;				private var btnTextFormat:TextFormat;				private var btnAutoSize:Boolean = false;		private var btnEnabled:Boolean = true;		private var scroller_mode:Boolean = false;				private var btnDropShadow = [new DropShadowFilter(0, 45, 0, .25, 5, 5, 2)];				// Setup the constructor when the class is created		public function CobraButton(auto:Boolean = false, w:Number=80, h:Number=20):void {						// Save the variables			btnAutoSize = auto;			btnWidth = w;			btnHeight = h;						// Set the attributes			buttonMode = true;			mouseChildren = false;						// Create the textfield			createBtnText();						// Draw the background			drawBtnBackground();						// Add the dropshadow			this.filters = btnDropShadow;						// Add event listeners			addEventListener(MouseEvent.MOUSE_OVER, mouse_over);		}												//**********************************************************************		// Functions		//**********************************************************************				private function createBtnText():void {			// Set the text format			var BtnFontClass:Class = getDefinitionByName("ArialBlack") as Class;			var btnFont:Font = new BtnFontClass() as Font;			var btnTextFormat:TextFormat = new TextFormat();			btnTextFormat.font = btnFont.fontName;			btnTextFormat.size = 12;			btnTextFormat.color = 0xFFFFFF;						// Create the textfield			btnLabel = new TextField();			btnLabel.autoSize = TextFieldAutoSize.LEFT;			btnLabel.multiline = false;			btnLabel.wordWrap = false;			btnLabel.defaultTextFormat = btnTextFormat;			btnLabel.embedFonts = true;			btnLabel.x = BTN_PADDING;			btnLabel.mouseEnabled = false;			addChild(btnLabel);		}				private function drawBtnBackground(_colors:Array = null, _outline:Array = null):void {						// Create a variable to store the colors			var colors:Array = _colors;			var outline:Array = _outline;						// If no colors where passed, use the default colors			if (colors == null) colors = BTN_COLOR;			if (outline == null) outline = BTN_OUTLINE_COLOR;						// Create variables for the gradient			var fillType:String = GradientType.LINEAR;			var alphas:Array = [1, 1];			var ratios:Array = [0, 255];			var rotate:Number;			var spreadMethod:String = SpreadMethod.PAD;						// Create a variable for the rounded rect			var roundness:Number;						// Check the height vs width			if (btnWidth < btnHeight) {				roundness = btnWidth;				rotate = 0;			} else {				roundness = btnHeight;				rotate = Math.PI / 2;			}						var matr:Matrix = new Matrix();			matr.createGradientBox(btnWidth, btnHeight, rotate, 0, 0);			     			// Draw the graphics			graphics.clear();			graphics.lineStyle(1, outline[0], 1, true);			graphics.beginGradientFill(fillType, colors, alphas, ratios, matr, spreadMethod); 			graphics.drawRoundRect(0,0,btnWidth,btnHeight,roundness, roundness);			graphics.endFill();		}		//**********************************************************************		// Functions		//**********************************************************************												//**********************************************************************		// Mouse Events		//**********************************************************************				private function mouse_over(e:MouseEvent):void {						// Add event listeners			addEventListener(MouseEvent.MOUSE_OUT, mouse_out);			addEventListener(MouseEvent.MOUSE_DOWN, mouse_down);						// Redraw the background			drawBtnBackground(BTN_OVER_COLOR);		}				private function mouse_out(e:MouseEvent):void {						// Remove event listeners			removeEventListener(MouseEvent.MOUSE_OUT, mouse_out);			removeEventListener(MouseEvent.MOUSE_DOWN, mouse_down);			removeEventListener(MouseEvent.MOUSE_UP, mouse_up);						// Redraw the background			drawBtnBackground();		}				private function mouse_down(e:MouseEvent):void {			// Set event listeners			if (scroller_mode) {				removeEventListener(MouseEvent.MOUSE_OVER, mouse_over);				removeEventListener(MouseEvent.MOUSE_OUT, mouse_out);				stage.addEventListener(MouseEvent.MOUSE_UP, stage_up);			} else {				addEventListener(MouseEvent.MOUSE_UP, mouse_up);			}						// Redraw the background			drawBtnBackground(BTN_DOWN_COLOR);		}				private function mouse_up(e:MouseEvent):void {						// Remove event listeners			removeEventListener(MouseEvent.MOUSE_UP, mouse_up);						// Redraw the background			drawBtnBackground(BTN_OVER_COLOR);		}				private function stage_up(e:MouseEvent):void {						// Remove event listeners			stage.removeEventListener(MouseEvent.MOUSE_UP, stage_up);						// Add listeners			addEventListener(MouseEvent.MOUSE_OVER, mouse_over);			addEventListener(MouseEvent.MOUSE_OUT, mouse_out);						// Redraw the background			if (this.hitTestPoint(stage.mouseX, stage.mouseY)) drawBtnBackground(BTN_OVER_COLOR) else drawBtnBackground(BTN_COLOR);		}				//**********************************************************************		// Mouse Events		//**********************************************************************												//**********************************************************************		// Setters		//**********************************************************************				public function set enabled(_enabled:Boolean):void {						// Save enabled variable			btnEnabled = _enabled;						if (btnEnabled) {								// Set the attributes				buttonMode = true;				// Redraw the background				drawBtnBackground();								// Add event listeners				addEventListener(MouseEvent.MOUSE_OVER, mouse_over);			} else {								// Set the attributes				buttonMode = false;							// Redraw the background				drawBtnBackground([0xEEEEEE, 0xCCCCCC]);								// Remove event listeners				removeEventListener(MouseEvent.MOUSE_OVER, mouse_over);				if (hasEventListener(MouseEvent.MOUSE_OUT)) removeEventListener(MouseEvent.MOUSE_OUT, mouse_out);				if (hasEventListener(MouseEvent.MOUSE_DOWN)) removeEventListener(MouseEvent.MOUSE_DOWN, mouse_down);				if (hasEventListener(MouseEvent.MOUSE_UP)) removeEventListener(MouseEvent.MOUSE_UP, mouse_up);			}		}				public function set label(txt:String):void {			// Set the label of the button			btnLabel.text = txt;			btnLabel.width = btnLabel.textWidth;			btnLabel.height = btnLabel.textHeight;						// If autosize is set to true			if (btnAutoSize) {								// Set the new width & height				btnWidth = btnLabel.width + BTN_PADDING*2;				btnHeight = btnLabel.height;								// Redraw the background				drawBtnBackground();			}        }		public function set scrollerMode(b:Boolean):void {			scroller_mode = b;		}				//**********************************************************************		// Setters		//**********************************************************************												//**********************************************************************		// Getters		//**********************************************************************		public function get label():String{			return btnLabel.text;        }				public function get scrollerMode():Boolean{			return scroller_mode;        }				//**********************************************************************		// Getters		//**********************************************************************			}}