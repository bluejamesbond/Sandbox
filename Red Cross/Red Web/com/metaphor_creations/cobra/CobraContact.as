//**************************************************\\//**************************************************\\//** TITLE: CobraContact.as		 	  		 	  **\\//** VERSION: 1.1  								  **\\//** LAST UPDATE: February 8, 2010    	       	  **\\//**************************************************\\//**************************************************\\//** CREATED BY: Metaphor Creations               **\\//** joe@metaphorcreations.com               	  **\\//** www.flashden.net/user/JoeMC                  **\\//** www.metaphorcreations.com               	  **\\//**************************************************\\//**************************************************\\package com.metaphor_creations.cobra {	import flash.display.*;	import fl.data.DataProvider;	import flash.net.*;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.StyleSheet;	import flash.events.*;	import caurina.transitions.*;	import com.metaphor_creations.cobra.Singleton;	import com.metaphor_creations.cobra.CobraScroller;	import com.metaphor_creations.cobra.CobraButton;	import com.metaphor_creations.cobra.CobraNotification;		public class CobraContact extends Sprite {				// Set these variables		private var external_link:String = "";		private var xml_path:String = "cobra_contact.xml";		private var css_path:String = "cobra_contact.css";		private var php_path:String = "_extra/contact.php";				private var external_swf:Boolean = false;				// Leave these variables as is		private var singleton:Singleton;				private var sw:Number;		private var sh:Number;				private var full_height:Boolean = false;		private var show_header:Boolean;		private var success:Boolean = false;				private var header_color:uint;		private var scroller:CobraScroller;		private var submitBtn:CobraButton;		private var notification:CobraNotification;		private var selected_form:CobraForm;				private var form_provider:DataProvider;		private var form_holder:Array = new Array();				private var css:StyleSheet = new StyleSheet();		private var css_loader:URLLoader = new URLLoader();		private var cssReq:URLRequest;				private var xml:XML;		private var xml_loader:URLLoader = new URLLoader();		private var xml_request:URLRequest;				// Setup the constructor when the class is created		public function CobraContact() : void {						// Create a singleton object			singleton = Singleton.getInstance();						// Resize the content			resizeContent();						// If this is not being used as an external swf			if (!external_swf) init();		}												//**********************************************************************		// Functions		//**********************************************************************				private function checkForms():Boolean {						// Create variables			var all_forms:Boolean = true;			var first_form:Boolean = true;						// Loop through all of the forms			for (var i:int = 0; i < form_holder.length; i++) {								var form:CobraForm = form_holder[i] as CobraForm;								// If the form is required				if (form.isRequired){							if (form.required.currentFrame==1 || form.required.currentFrame==3) {												// Set all forms to false						all_forms = false;												// Toggle the required icon						form.required.gotoAndStop(3);												// Animate the required icon						form.animateRequiredIcon();												// Select the first unfilled required form						if (first_form) {														// Save the form							selected_form = form;														// Toggle the boolean							first_form = false;						}					}				}			}						if (all_forms == false) {							// Create the notification				createNotification("Required fields must be completed", "You must complete all required fields before you can submit your information.");								// Disable the submit button & scroller				submitBtn.enabled = false;				scroller.enabled = false;			} else {								selected_form = null;			}						return all_forms;		}				private function closeNotification(e:Event):void {						// Remove the listener			notification.removeEventListener("notificationClosed", closeNotification);						// Remove the notification			removeChild(notification);						// Enable the submit button & scroller			submitBtn.enabled = true;			scroller.enabled = true;						if (selected_form != null) selected_form.selectForm();						if (success) {								if (external_link != "") {					// Create a urlrequest					var req:URLRequest = new URLRequest(external_link);					navigateToURL(req, "_blank");					success = false;				}			}		}				private function createContactMsg():Array {						// Create an xml list of contact to emails			var xml_list:XMLList = xml.CONTACT_EMAIL.TO;						// Create a variable to store the emails			var email_string:String = "";						// Loop through the xml list and store the emails			for each (var email:XML in xml_list) {								// Add the email to the string				email_string += (String(email) + ",");			}						// Get rid of the last comma			email_string = email_string.slice(0,email_string.length-1);						trace(email_string);						// Create variables for the php emailing			var _to:String = swapMsg(email_string);			var _from:String = swapMsg(xml.CONTACT_EMAIL.FROM);			var _subject:String = swapMsg(xml.CONTACT_EMAIL.SUBJECT);			var _message:String = swapMsg(xml.CONTACT_EMAIL.MESSAGE);						// Save the info to an array			var contactMsg:Array = [_to, _from, _subject, _message];						return contactMsg;		}				private function createHeader(_ypos:Number, h:String):Number {						var yPos:Number = _ypos;						// If there is content for the heading			if (h != ""){								// Save the header string				var str:String = h;				show_header = true;									header.styleSheet = css;				header.condenseWhite = true;				header.htmlText = str;				header.embedFonts = true;				header.x = singleton.edgeSpacing;				header.y = yPos;				header.width = singleton.sw - (singleton.edgeSpacing*2);				header.height = header.textHeight + 15;								// Draw the header background				drawHeaderBackground();								yPos = headerBG.y + headerBG.height + singleton.edgeSpacing;							// If there is not content for the heading			} else {				show_header = false;				header.visible = false;				header.mouseEnabled = false;				headerBG.visible = false;				headerBG.mouseEnabled = false;			}						return yPos;		}				private function createNotification(_header:String, _txt:String):void {						// Create a new notification			notification = new CobraNotification(_header, _txt);						// Set the position of the notification			notification.x = singleton.sw/2 - notification.width/2;			notification.y = singleton.sh/2 - notification.height/2 + 100;			Tweener.addTween(notification, {y:singleton.sh/2 - notification.height/2, time:.7, transition:"easeOutQuart"});						// Add a listener			notification.addEventListener("notificationClosed", closeNotification);						// Add the notification to the stage			addChild(notification);		}				private function createScroller(yPos:Number):void {						// Create a new scroller			scroller = new CobraScroller();			// SET THE DIMENSION & POSITION OF THE contentContainer SCROLLER			scroller.y = yPos;			scroller.x = singleton.sw - singleton.scrollerWidth - singleton.edgeSpacing;				addChild(scroller);		}				private function createSidebar(yPos:Number, txt:String):void {						// Format the sideBar			sideBar.styleSheet = css;			sideBar.condenseWhite = true;			sideBar.htmlText = txt;			sideBar.embedFonts = true;					sideBar.width = singleton.sidebarWidth;			sideBar.height = singleton.sidebarHeight;			sideBar.x = singleton.edgeSpacing;			sideBar.y = yPos;			sideBar.mouseWheelEnabled = false;;		}				private function createUserMsg():Array {						// Create variables for the php emailing			var _to:String = swapMsg(xml.USER_EMAIL.TO);			var _from:String = swapMsg(xml.USER_EMAIL.FROM);			var _subject:String = swapMsg(xml.USER_EMAIL.SUBJECT);			var _message:String = swapMsg(xml.USER_EMAIL.MESSAGE);						// Save the info to an array			var userMsg:Array = [_to, _from, _subject, _message];						return userMsg;		}				private function drawHeaderBackground():void {						// Draw the background			headerBG.graphics.clear();			headerBG.graphics.beginFill(header_color);			headerBG.graphics.drawRect(0,0,singleton.sw,header.textHeight - 5 + singleton.edgeSpacing*2);			headerBG.graphics.endFill();		}				private function init():void {						// Set the alpha to zero			this.alpha = 0						// Create and set masks			var bgMask = new MovieClip();			bgMask.graphics.beginFill(0);			bgMask.graphics.drawRoundRect(0, 0, bg.width, bg.height, 20, 20);			bgMask.graphics.endFill();			addChild(bgMask);						var headerMask = new MovieClip();			headerMask.graphics.beginFill(0);			headerMask.graphics.drawRoundRect(0, 0, bg.width, bg.height, 20, 20);			headerMask.graphics.endFill();			addChild(headerMask);						headerBG.mask = headerMask;			bg.mask = bgMask;						// Setup the css			cssReq = new URLRequest(css_path);			configureListeners_css(css_loader);			css_loader.load(cssReq);						// Setup the xml			xml_request = new URLRequest(xml_path);			configureListeners_xml(xml_loader);						// Add listeners			singleton.addEventListener("formCountUpdated", updateFormCount);		}				private function resetForms():void {						// Loop through the forms			for (var i:int = 0; i < form_holder.length; i++){								// Save the movie clip				var form:CobraForm = form_holder[i] as CobraForm;								// Reset the form				form.resetForm();			}						// Reset the scroller			singleton.scrollerContentPosition = 0;		}				private function resizeContent():void {						// Save the data to the singleton			singleton.sw = this.width;			singleton.sh = this.height;						// Set the width & height of the background			bg.width = singleton.sw;			bg.height = singleton.sh;						// Scale this object to 100%			this.scaleX = 1;			this.scaleY = 1;		}				private function sendForm():void {						// Create the message to be sent to your email address			var contactMsg:Array = createContactMsg();						// Create the message to be sent to the user			var userMsg:Array = createUserMsg();						// Create a new loader			var loader:URLLoader = new URLLoader();						// Create a urlrequest			var req:URLRequest = new URLRequest(php_path);					// Create url variables object and set the data format			var variables:URLVariables = new URLVariables;			variables.dataFormat = URLLoaderDataFormat.VARIABLES;					// Set request method			req.method = URLRequestMethod.POST;						// Set the variables			variables.contactTo = contactMsg[0];			variables.contactFrom = contactMsg[1];			variables.contactSubject = contactMsg[2];			variables.contactMessage = contactMsg[3];						variables.userTo = userMsg[0];			variables.userFrom = userMsg[1];			variables.userSubject = userMsg[2];			variables.userMessage = userMsg[3];						// Set the variables to be the data of the request			req.data = variables;						// Set up listeners for the loader			configureListeners_php(loader);						// loader the loader			loader.load(req);		}				private function setBottom():void {				// Set the position and width of the linebreak			lineBreak.x = singleton.edgeSpacing;			lineBreak.y = singleton.sh - 18 - singleton.edgeSpacing*2;			lineBreak.width = singleton.sw - singleton.edgeSpacing*2;						// Create and set the position of the submit button			submitBtn = new CobraButton(true);			submitBtn.label = "SUBMIT";			submitBtn.x = bg.width - singleton.edgeSpacing - submitBtn.width;			submitBtn.y = bg.height - singleton.edgeSpacing - submitBtn.height;						// Set the requiredInfo			requiredInfo.x = singleton.edgeSpacing;			requiredInfo.y = submitBtn.y;						// Set the formInfoPosition			formInfo.x = submitBtn.x - 20;			formInfo.y = submitBtn.y;							// Add the button to the stage			addChild(submitBtn);						// Add an eventlistener to the submit button			submitBtn.addEventListener(MouseEvent.CLICK, submitClick);		}				private function setForms():void{				// Loop through the forms			for (var i:int = 0; i < form_provider.length; i++){								// Save the object				var o:Object = form_provider.getItemAt(i);								// Create a new form				var form:CobraForm = new CobraForm(o.HEADING, o.REQUIRED, o.MULTILINE, o.VALIDATE, o.RESTRICT, o.FORM_TIP, o.combo);								// Set the tab index				form.txt.tabEnabled = true;				form.txt.tabIndex = i+1;								// Add the form to the form_holder				form_holder.push(form);								// Add the form to the scroller				scroller.addContent(form);			}		}				private function setupContent(s_data:String):void {						// Save the xml data as an xml object			xml = new XML(s_data);						// Save the edgespacing to the singleton			singleton.edgeSpacing = xml.EDGE_SPACING;			// Save the colors			singleton.formColor = uint("0x"+xml.FIELD_COLOR);			singleton.selectedFormColor = uint("0x"+xml.FIELD_SELECT_COLOR);			// Save the forms as xml			var form_xml:XML = XML(xml.FORM_CONTENT);						// Populate the form_provider			form_provider = new DataProvider(form_xml);						// Create a counter			var counter:int = 0;			// Loop through the xml			for each (var form:XML in form_xml.FORM) {								// If there's a combo box				if (form.child("COMBO").length() != 0) {										// Create data providers					var item_provider:DataProvider = new DataProvider(XML("<x>"+form.COMBO.ITEM+"</x>"));					var combo_provider:DataProvider = new DataProvider();					combo_provider.addItem({prompt:String(form.PROMPT), items:item_provider});										// Set the combo to the form_provider					form_provider.getItemAt(counter).combo = combo_provider;				}								// Add 1 to the counter				counter++;			}			// Set the full_height variable			//if (xml.USE_FULL_HEIGHT.toLowerCase() == "true") singleton.fullHeight = true;			singleton.fullHeight = false;						// Create a variable for the yposition of the objects			var yPos:Number = singleton.edgeSpacing;						// Creat the header			header_color = uint("0x"+xml.HEADING_COLOR);			yPos = createHeader(yPos, String(xml.HEADING));						// Save the sidebar dimensions			singleton.sidebarWidth = Number(xml.SIDE_BAR.attribute("width"));			singleton.sidebarHeight = singleton.sh - yPos - 18 - singleton.edgeSpacing*3;			// Save the scroller dimensions			singleton.scrollerWidth = singleton.sw - singleton.sidebarWidth - singleton.edgeSpacing*3;			singleton.scrollerHeight = singleton.sh - yPos - 18 - singleton.edgeSpacing*3;						// Create the sidebar			createSidebar(yPos, String(xml.SIDE_BAR));						// Create the scroller			createScroller(yPos);						// Set up the forms			setForms();						// Set the bottom portion			setBottom();						// Tween this onto the stage			Tweener.addTween(this, {alpha:1, time:.2, transition:"linear"});		}				private function swapMsg(s:String):String {						// Store the passed string			var msg:String = s;						// Loop through the form holder			for (var i:int; i < form_holder.length; i++){								var form:CobraForm = form_holder[i] as CobraForm;								// Save the string to look for				var str:String = "**"+form.formHeading+"**";								// Save the string to swap				var swap:String = form.txt.text;						// Swap out the selection with the user input				msg = msg.replace(str, swap);			}						// Return the new string			return msg;		}				private function updateFormCount(e:Event):void {						// Set the text			formInfo.requiredFormsTxt.autoSize = TextFieldAutoSize.RIGHT;			formInfo.requiredFormsTxt.multiline = formInfo.requiredFormsTxt.selectable = false;						formInfo.formsTxt.autoSize = TextFieldAutoSize.RIGHT;			formInfo.formsTxt.multiline = formInfo.formsTxt.selectable = false;						formInfo.requiredFormsTxt.text = "REQUIRED FIELDS COMPLETED: "+singleton.requiredFormCountCompleted+" of "+singleton.requiredFormCount;			formInfo.formsTxt.text = "TOTAL FIELDS COMPLETED: "+singleton.formCountCompleted+" of "+singleton.formCount;						// Set the icon position			formInfo.icon.x = -formInfo.requiredFormsTxt.width+2;		}		//**********************************************************************		// Functions		//**********************************************************************												//**********************************************************************		// Mouse Events		//**********************************************************************				private function submitClick(e:MouseEvent):void{						// Check to make sure all required fields are filled out			if (checkForms() == true){				// Send the form				sendForm();								// Disable the submit button & scroller				submitBtn.enabled = false;				scroller.enabled = false;			}		}						//**********************************************************************		// Mouse Events		//**********************************************************************				//**********************************************************************		// CSS Loading Events		//**********************************************************************				private function configureListeners_css(dispatcher:IEventDispatcher):void {			dispatcher.addEventListener(Event.COMPLETE, completeHandler_css);			dispatcher.addEventListener(Event.OPEN, openHandler_css);			dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler_css);			dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler_css);			dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler_css);			dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler_css);		}		private function removeListeners_css(dispatcher:IEventDispatcher):void {			dispatcher.removeEventListener(Event.COMPLETE, completeHandler_css);			dispatcher.removeEventListener(Event.OPEN, openHandler_css);			dispatcher.removeEventListener(ProgressEvent.PROGRESS, progressHandler_css);			dispatcher.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler_css);			dispatcher.removeEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler_css);			dispatcher.removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler_css);		}				private function completeHandler_css(e:Event):void {						// Create a new loader instance			var url_loader:URLLoader = URLLoader(e.target);						// Remove all listeners			removeListeners_xml(url_loader);						// Parse the css data into the variable			css.parseCSS(css_loader.data);						// Load the xml file			xml_loader.load(xml_request);		}				private function openHandler_css(e:Event):void {			//trace("CSS openHandler: " + e);		}				private function progressHandler_css(e:ProgressEvent):void {			//trace("CSS loaded:" + e.bytesLoaded + " total: " + e.bytesTotal);		}				private function securityErrorHandler_css(e:SecurityErrorEvent):void {			//trace("CSS securityErrorHandler: " + e);		}				private function httpStatusHandler_css(e:HTTPStatusEvent):void {			//trace("CSS httpStatusHandler: " + e);		}				private function ioErrorHandler_css(e:IOErrorEvent):void {			//trace("CSS ioErrorHandler: " + e);		}				//**********************************************************************		// XML Loading Events		//**********************************************************************												//**********************************************************************		// XML Loading Events		//**********************************************************************				private function configureListeners_xml(dispatcher:IEventDispatcher):void {			dispatcher.addEventListener(Event.COMPLETE, completeHandler_xml);			dispatcher.addEventListener(Event.OPEN, openHandler_xml);			dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler_xml);			dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler_xml);			dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler_xml);			dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler_xml);		}				private function removeListeners_xml(dispatcher:IEventDispatcher):void {			dispatcher.removeEventListener(Event.COMPLETE, completeHandler_xml);			dispatcher.removeEventListener(Event.OPEN, openHandler_xml);			dispatcher.removeEventListener(ProgressEvent.PROGRESS, progressHandler_xml);			dispatcher.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler_xml);			dispatcher.removeEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler_xml);			dispatcher.removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler_xml);		}				private function completeHandler_xml(e:Event):void {							// Create a new loader instance			var url_loader:URLLoader = URLLoader(e.target);						// Remove all listeners			removeListeners_xml(url_loader);							// Set up the scroller			setupContent(url_loader.data);		}				private function openHandler_xml(e:Event):void {			//trace("XML openHandler: " + e);		}				private function progressHandler_xml(e:ProgressEvent):void {			//trace("WEB SETUP loaded:" + e.bytesLoaded + " total: " + e.bytesTotal);		}				private function securityErrorHandler_xml(e:SecurityErrorEvent):void {			//trace("XML securityErrorHandler: " + e);		}				private function httpStatusHandler_xml(e:HTTPStatusEvent):void {			//trace("XML httpStatusHandler: " + e);		}				private function ioErrorHandler_xml(e:IOErrorEvent):void {			//trace("XML ioErrorHandler: " + e);		}				//**********************************************************************		// XML Loading Events		//**********************************************************************												//**********************************************************************		// PHP Loading Events		//**********************************************************************				private function configureListeners_php(dispatcher:IEventDispatcher):void {			dispatcher.addEventListener(Event.COMPLETE, completeHandler_php);			dispatcher.addEventListener(Event.OPEN, openHandler_php);			dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler_php);			dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler_php);			dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler_php);			dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler_php);		}		private function removeListeners_php(dispatcher:IEventDispatcher):void {			dispatcher.removeEventListener(Event.COMPLETE, completeHandler_php);			dispatcher.removeEventListener(Event.OPEN, openHandler_php);			dispatcher.removeEventListener(ProgressEvent.PROGRESS, progressHandler_php);			dispatcher.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler_php);			dispatcher.removeEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler_php);			dispatcher.removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler_php);		}				function completeHandler_php(e:Event):void {							// Create a new loader instance			var loader:URLLoader = URLLoader(e.target);						// Remove all listeners			removeListeners_php(loader);						// Reset forms			resetForms();						// Save variable			success = true;						// Create the notification			createNotification("Your information has been submitted!", "An email will be sent to your email address confirming that your information has been sent.");		}				function openHandler_php(e:Event):void {		}				function progressHandler_php(e:ProgressEvent):void {						var percent:Number = e.bytesLoaded/e.bytesTotal;		}				function securityErrorHandler_php(e:SecurityErrorEvent):void {			trace("PHP securityErrorHandler: " + e);		}				function httpStatusHandler_php(e:HTTPStatusEvent):void {			trace("PHP httpStatusHandler: " + e);		}				function ioErrorHandler_php(e:IOErrorEvent):void {			trace("PHP ioErrorHandler: " + e);		}				//**********************************************************************		// PHP Loading Events		//**********************************************************************	}}