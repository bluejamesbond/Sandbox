//**************************************************\\//**************************************************\\//** TITLE: CobraScroller.as		 	  		  **\\//** VERSION: 1.0  								  **\\//** LAST UPDATE: July 25, 2009    	       	      **\\//**************************************************\\//**************************************************\\//** CREATED BY: Metaphor Creations               **\\//** joe@metaphorcreations.com               	  **\\//** www.flashden.net/user/JoeMC                  **\\//** www.metaphorcreations.com               	  **\\//**************************************************\\//**************************************************\\package com.metaphor_creations.cobra {	import flash.display.*;	import flash.events.Event;	import flash.events.MouseEvent;	import caurina.transitions.*;	import com.metaphor_creations.cobra.Singleton;	import com.metaphor_creations.cobra.CobraScrollbarBackground;	import com.metaphor_creations.cobra.CobraButton;		public class CobraScroller extends Sprite {				private static var CONTENT_SPACING:Number = 10;		private var scrollerContentHeight:Number;		private var min_y:Number;		private var max_y:Number;		private var content_min_y:Number;		private var content_max_y:Number;				private var scrollerToggle:Boolean=false;		private var scrollerEnabled:Boolean;				private var scrollerBG:MovieClip;		private var scrollerContent:MovieClip;		private var scrollerMask:MovieClip;				private var scrollerObjects:Array;				private var singleton:Singleton;		private var scrollbarBG:CobraScrollbarBackground;		private var scrollbarDrag:CobraButton;		// Setup the constructor when the class is created		public function CobraScroller():void {						// Create a singleton object			singleton = Singleton.getInstance();						// Initialize the scroller			init();		}												//**********************************************************************		// Functions		//**********************************************************************				public function addContent(object:DisplayObject, pos:int = -1):void {						if (pos == -1) {								scrollerObjects.push(object);				scrollerContent.addChild(object);			}						// Arrange the content			arrangeContent();		}				private function checkScrollerToggle():void {						if (scrollerContent.height < scrollerMask.height) {								// Set the scrollerToggle				scrollerToggle = false;								// Make the scrollbar invisible				scrollbarDrag.visible = false;				scrollbarBG.visible = false;			} else {								// Set the scrollerToggle				scrollerToggle = true;								// Make the scrollbar invisible				scrollbarDrag.visible = true;				scrollbarBG.visible = true;			}						// Redraw the mask and background			setMask();			setBG();		}				private function init():void {						// Save the variables			scrollerEnabled = true;						// Create the content array			scrollerObjects = new Array();						// Create the scrollbarBG			scrollbarBG = new CobraScrollbarBackground(13, singleton.scrollerHeight);			scrollbarBG.x = singleton.scrollerWidth - scrollbarBG.width;						// Create the scrollbarDrag			scrollbarDrag = new CobraButton(false, 13, 50);			scrollbarDrag.x = singleton.scrollerWidth - scrollbarBG.width;			scrollbarDrag.scrollerMode = true;						// Set the min & max			min_y = 0;			max_y = scrollbarBG.height - scrollbarDrag.height;			content_max_y = 0;						// Create the scroller bg			scrollerBG = new MovieClip();			setBG();						// Create the scroller content			scrollerContent = new MovieClip();						// Create the scroller mask			scrollerMask = new MovieClip();						setMask();						// Add the objects to the scroller			addChildAt(scrollerBG, 0);			addChildAt(scrollerContent, 1);			addChildAt(scrollerMask, 2);			addChildAt(scrollbarBG, 3);			addChildAt(scrollbarDrag, 4);						// Set the mask of the content			scrollerContent.mask = scrollerMask;						// Add listeners			addEventListener(MouseEvent.MOUSE_WHEEL, viewerWheel);			scrollbarDrag.addEventListener(MouseEvent.MOUSE_DOWN, dragDown);			singleton.addEventListener("scrollerContentUpdated", arrangeContent);			singleton.addEventListener("scrollerContentPositionChanged", changeContentPosition);		}				private function setBG():void {						// Draw the graphics			scrollerBG.graphics.clear();			scrollerBG.graphics.beginFill(0xFFFFFF,0); 						if (scrollerToggle) scrollerBG.graphics.drawRect(0,0,(singleton.scrollerWidth - scrollbarBG.width - singleton.edgeSpacing),singleton.scrollerHeight);				else scrollerBG.graphics.drawRect(0,0,singleton.scrollerWidth,singleton.scrollerHeight);						scrollerBG.graphics.endFill();						// Save the content width			singleton.scrollerContentWidth = scrollerBG.width;		}				private function setMask():void {						// Draw the graphics			scrollerMask.graphics.clear();			scrollerMask.graphics.beginFill(0x00FF00);						if (scrollerToggle) scrollerMask.graphics.drawRect(-2,0,(singleton.scrollerWidth - scrollbarBG.width - singleton.edgeSpacing)+4,singleton.scrollerHeight);				else scrollerMask.graphics.drawRect(-2,0,singleton.scrollerWidth+4,singleton.scrollerHeight);							scrollerMask.graphics.endFill();		}		//**********************************************************************		// Functions		//**********************************************************************												//**********************************************************************		// Events		//**********************************************************************				private function arrangeContent(e:Event = null):void {			// Create a yPos variable			var yPos:Number = 0;						// Loop through objects			for (var i:int = 0; i < scrollerObjects.length; i++) {								var o:DisplayObject = scrollerObjects[i] as DisplayObject;								o.y = yPos;								yPos = yPos + o.height + CONTENT_SPACING;			}						// Save the min y			content_min_y = -(scrollerContent.height - scrollerMask.height);			if (content_min_y > 0) content_min_y = 0;						// Save the content height			singleton.scrollerContentHeight = scrollerContent.height;						// Check the scroller toggle			checkScrollerToggle();						// Update the scroller			changeContentPosition();		}				private function changeContentPosition(e:Event = null):void {			// Create variables			var percent:Number = singleton.scrollerContentPosition/content_min_y;						if (percent > 1) percent=1;						// Tween the drag			Tweener.addTween(scrollbarDrag, {y:max_y * percent, time:.3, transition:"easeOutQuart"});						// Tween the content			Tweener.addTween(scrollerContent, {y:singleton.scrollerContentPosition, time:.3, transition:"easeOutQuart"});		}				private function dragMove(e:Event):void {						// Create variables			var offSet:Number = scrollbarDrag.height/2;			var yPos:Number = mouseY - offSet;			var percent:Number;			var newPos:Number;						if (yPos < min_y) yPos=min_y;			if (yPos > max_y) yPos=max_y;						// Set the position of the drag			scrollbarDrag.y = yPos;						percent = scrollbarDrag.y/max_y;			newPos = content_min_y * percent;						// Save the position			singleton.scrollerContentPosition = newPos;		}				//**********************************************************************		// Events		//**********************************************************************												//**********************************************************************		// Mouse Events		//**********************************************************************				private function dragDown(e:MouseEvent):void {						// Add listeners			scrollbarDrag.addEventListener(Event.ENTER_FRAME, dragMove);			stage.addEventListener(MouseEvent.MOUSE_UP, dragUp);		}				private function dragUp(e:MouseEvent):void {						// Add listeners			scrollbarDrag.removeEventListener(Event.ENTER_FRAME, dragMove);			stage.removeEventListener(MouseEvent.MOUSE_UP, dragUp);		}				private function viewerWheel(e:MouseEvent):void {						var yPos:Number = scrollbarDrag.y - ((scrollbarBG.height/scrollbarDrag.height) * e.delta);			var percent:Number;			var newPos:Number;						if (yPos < min_y) yPos=min_y;			if (yPos > max_y) yPos=max_y;						// Set the position of the drag			scrollbarDrag.y = yPos;						percent = scrollbarDrag.y/max_y;			newPos = content_min_y * percent;						// Save the position			singleton.scrollerContentPosition = newPos;		}				//**********************************************************************		// Mouse Events		//**********************************************************************												//**********************************************************************		// Setters		//**********************************************************************				public function set enabled(_enabled:Boolean):void {						// Save enabled variable			scrollerEnabled = _enabled;						if (scrollerEnabled) {								// Enable the drag				scrollbarDrag.enabled = true;				// Enable the children				mouseChildren = true;								// Add the mouse wheel listener				addEventListener(MouseEvent.MOUSE_WHEEL, viewerWheel);							} else {							// Enable the drag				scrollbarDrag.enabled = false;				// Enable the children				mouseChildren = false;								// Remove the mouse wheel listener				removeEventListener(MouseEvent.MOUSE_WHEEL, viewerWheel);			}		}				public function set setHeight(h:Number):void {						// Save the variable			singleton.scrollerHeight = h;						// Redraw the mask and bg			setBG();			setMask();						// Dispatch an event			dispatchEvent(new Event("scrollerHeightChanged"));		}				public function set setWidth(w:Number):void {						// Save the variable			singleton.scrollerWidth = w;						// Redraw the mask and bg			setBG();			setMask();						// Dispatch an event			dispatchEvent(new Event("scrollerWidthChanged"));		}		//**********************************************************************		// Setters		//**********************************************************************	}}